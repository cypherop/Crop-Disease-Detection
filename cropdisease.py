# -*- coding: utf-8 -*-
"""CropDisease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hU15IMwIKHsHem1AH80f6KcWy3zZ5AJh
"""

from google.colab import drive

drive.mount('/gdrive',force_remount=True)

!unzip "/gdrive/My Drive/CropDataset.zip"

!ls

import os
import keras
import shutil
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras import layers
from keras.layers import Input,Dense,Activation,ZeroPadding2D,BatchNormalization,Flatten,Conv2D,MaxPooling2D,Dropout,Lambda,Concatenate
from keras.models import Model,Sequential
from keras.optimizers import Adam

train_minibatch_size = 128
val_minibatch_size = 64
Image_shape = (256,256,3)

classes=[]
for clas in os.listdir('./Dataset/train/'):
	classes.append(clas)

train_batch=ImageDataGenerator(rescale=1./225).flow_from_directory(
            directory='./Dataset/train',
            target_size=(256,256),
            color_mode='rgb',
            classes=classes,
            batch_size=train_minibatch_size,
            class_mode='categorical',
            shuffle=True)

val_batch=ImageDataGenerator(rescale=1./225).flow_from_directory(
            directory='./Dataset/test',
            target_size=(256,256),
            color_mode='rgb',
            classes=classes,
            batch_size=val_minibatch_size,
            class_mode='categorical',
            shuffle=True)

model = Sequential()
model.add(Conv2D(32, (3, 3),activation='relu',padding='same',input_shape=Image_shape))
model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(4096, activation='relu'))
model.add(Dropout(0.4))
model.add(BatchNormalization())
model.add(Dense(4096, activation='relu'))
model.add(Dropout(0.4))
model.add(BatchNormalization())
model.add(Dense(1000, activation = 'relu'))
model.add(Dropout(0.5))
model.add(BatchNormalization())
model.add(Dense(38, activation='softmax'))

model.compile(Adam(lr=.0001),'categorical_crossentropy',metrics=['accuracy'])

model.summary()

history = model.fit_generator(train_batch, steps_per_epoch=550, validation_data=val_batch, validation_steps=275, epochs=13, verbose=1)

plt.plot(history.history['acc'], color='blue')
plt.plot(history.history['val_acc'], color='yellow')
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

plt.figure()
plt.plot(history.history['loss'], color='red')
plt.plot(history.history['val_loss'], color='green')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

!unzip "/gdrive/My Drive/CropTestImages.zip"

model_json = model.to_json()
with open("CropModel.json", "w") as json_file:
    json_file.write(model_json)
model.save_weights("CropModel.h5")

!ls

image_path = "./CropTestImages/test/CornCommonRust3.JPG"
new_img = image.load_img(image_path, target_size=(256, 256))
img = image.img_to_array(new_img)
img = np.expand_dims(img, axis=0)
img = img/255

print("Prediction:")
prediction = model.predict(img)

fla = prediction.flatten()
ma = fla.max()
for index,item in enumerate(fla):
    if item == ma:
        class_name = classes[index]    
plt.figure(figsize = (4,4))
plt.imshow(new_img)
plt.axis('off')
plt.title(class_name)
plt.show()